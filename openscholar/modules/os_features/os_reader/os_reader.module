<?php

include_once 'os_reader.features.inc';

/**
 * Implements hook_menu().
 */
function os_reader_menu() {
  $items = array();

  $items['os-reader/copy-feed-to-news/%/%/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'os_reader_ajax_copy_feed_to_news',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'os_reader_ajax_copy_feed_to_news_access',
    'access arguments' => array(2, 3, 5),
    'theme callback' => 'os_reader_ajax_theme_name',
  );

  $items['cp/content/import'] = array(
    'title' => 'Import news',
    'page callback' => 'os_reader_import_news',
    'access callback' => 'os_reader_import_news_access_callback',
  );

  return $items;
}

/**
 * Callback function for the theme name. When the ajax action for import the
 * feed item, the theme may changed. This will prevent from the loading other
 * themes.
 */
function os_reader_ajax_theme_name() {
  return 'cp_theme';
}

/**
 * Implements hook_menu_alter().
 */
function os_reader_menu_alter(&$item) {
  $item['node/add/feed-importer']['access callback'] = 'os_reader_feed_importer_access_callback';
}

/**
 * Custom access callback - Verifying the user can add a feed importer although
 * the OS reader app is disabled.
 */
function os_reader_feed_importer_access_callback() {
  return _os_reader_feed_importer_access_callback("create");
}

/**
 * Helper function for determine the access permission for a node.
 *
 * @param $op
 *  The applied operation on the node.
 *
 * @return bool
 *  TRUE/FALSE for the operation which the user try to apply.
 */
function _os_reader_feed_importer_access_callback($op) {
  $string = "{$op} feed_importer content";
  if ($vsite = vsite_get_vsite()) {
    return og_user_access('node', $vsite->id, $string);
  }
  else {
    return user_access($string);
  }
}

/**
 * Implements hook_theme().
 */
function os_reader_theme() {
  $items = array();

  $items['os_reader'] = array(
    'variables' => array(
      'view' => '',
      'importers' => '',
      'add_new' => '',
    ),
    'template' => 'os-reader',
  );

  return $items;
}

/**
 * Access callback for the os reader news import.
 */
function os_reader_import_news_access_callback() {
  if ($vsite = vsite_get_vsite()) {
    return og_user_access('node', $vsite->id, 'create news content');
  }

  return user_access('create news content');
}

/**
 * Page Callback; Display feed items which can be imported into vsite.
 */
function os_reader_import_news() {
  drupal_add_css(drupal_get_path('module', 'os_reader') . '/os_reader.css');
  drupal_add_js(drupal_get_path('module', 'os_reader') . '/os_reader.js');

  $item = menu_get_item();
  $feed_importer_nid = isset($item['map'][3]) ? $item['map'][3] : NULL;

  // Check if user is allowed to import feeds.
  if ($vsite = vsite_get_vsite()) {
    if (og_user_access('node', $vsite->id, 'create feed_importer content')) {
      $options = array('attributes' => array('class' => array('add-new')));
      $add_new = l(t('+ Add new'), 'node/add/feed-importer', $options);
    }
  }

  $variables = array(
    'importers' => os_reader_get_importers_list($feed_importer_nid),
    'view' => views_embed_view('os_reader_feeds', 'default', $feed_importer_nid),
    'add_new' => empty($add_new) ? '' : $add_new,
  );

  return theme('os_reader', $variables);
}

/**
 * Helper function for import news screen; Returns list of feed importer nodes.
 *
 * @param $feed_importer_nid
 *  Currently viewed importer, will get class 'active'.
 *
 * @return string
 *  Themed item list of feed importers.
 */
function os_reader_get_importers_list($feed_importer_nid = NULL) {
  // Get all feed importer nodes.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'feed_importer')
    ->propertyCondition('status', NODE_PUBLISHED);

  // Display only feeds from this viste.
  if ($vsite = vsite_get_vsite()) {
    $query->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $vsite->id);
  }

  $result = $query->execute();

  if (empty($result['node'])) {
    // No feed importer nodes.
    return t('No feed importers found.');
  }
  $importers = node_load_multiple(array_keys($result['node']));

  // Create item list of feed importers.
  $items = array(
    array(
      'data' => l(t('All feeds'), 'cp/content/import'),
      'class' => empty($feed_importer_nid) ? array('active') : array(),
    ),
  );
  foreach ($importers as $importer) {
    if ($feed_importer_nid == $importer->nid) {
      // Currently viewed importer, display as active text.
      $items[] = array(
        'data' => check_plain($importer->title),
        'class' => array('active'),
      );
    }
    else {
      // Display importer as link.
      $items[] = array(
        'data' => l($importer->title, 'cp/content/import/' . $importer->nid),
      );
    }
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_reader_os_add_new_links_alter(&$links) {
  $menu = menu_get_item();

  $node_is_news_type = isset($menu['map']['1']) && is_object($menu['map']['1']) && $menu['map']['1']->type == 'news';

  if (($menu['path'] == 'news' || $node_is_news_type) && os_reader_import_news_access_callback()) {
    $links['news-import'] = array(
      'title' => t('Import News'),
      'href' => 'cp/content/import',
    );
  }
}

/**
 * Access callback; Feed item copy.
 *
 * @param $feed_id
 *  The feed ID.
 * @param $nid
 *  The vsite node ID.
 * @param $token
 *  Security token.
 *
 * @return bool
 *  Return true/false whether the user has access to copy the feed.
 */
function os_reader_ajax_copy_feed_to_news_access($feed_id, $nid, $token) {
  if (!drupal_valid_token($token, $feed_id . ':' . $nid)) {
    // Not a valid token.
    return;
  }
  if (!og_user_access('node', $nid, 'create news content')) {
    // User does not have access to create "News" in VSite.
    return;
  }

  if (!os_reader_feed_item_load($feed_id)) {
    // Not a valid feed item.
    return;
  }

  return TRUE;
}

/**
 * AJAX callback for bind feed item to node.
 *
 * @param $feed_id
 *  The feed ID.
 * @param $vsite_id
 *  The vsite ID.
 * @param string $ajax
 */
function os_reader_ajax_copy_feed_to_news($feed_id, $vsite_nid, $ajax = 'nojs') {
  $feed = os_reader_feed_item_load($feed_id);
  $vsite = vsite_get_vsite($vsite_nid);
  $vsite_id = $vsite->id;
  $current_vsite = vsite_get_vsite();

  $news_node = os_reader_copy_feed_item_to_news($feed, $vsite);

  if ($ajax == 'ajax') {
    $generic_message = t('Imported to @vsite. ', array('@vsite' => $vsite->og->title)) . l(t('Edit'), 'node/' . $news_node->nid);
    $vsite_message = t('Imported. !edit', array('!edit' => l(t('Edit'), 'node/' . $news_node->nid)));
    $message = empty($current_vsite) ?  $generic_message : $vsite_message;

    $commands[] = ajax_command_html("#feed-{$feed_id}-{$vsite_id}", $message);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    drupal_set_message(t('Feed item added to @vsite', array('@vsite' => $vsite->og->title)));
    drupal_goto('cp/content/import');
  }
}

/**
 * Implements hook_os_app_info().
 */
function os_reader_os_app_info() {
  $apps = array();

  $apps['os_reader'] = array(
    'path' => 'reader',
  	'nodetypes' => array(
  	  'feed',
    ),
    'views tabs' => array(
      'reader' => array('page'),
    ),
  );

  return $apps;
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_reader_vsite_og_node_type_info() {
  return array(
    'feed' => 'group content',
    'feed_importer' => 'group content',
  );
}

/**
 * Implements hook_entity_info().
 */
function os_reader_entity_info() {
  return array(
    'os_feed_item' => array(
      'label' => t('OS feed item'),
      'entity class' => 'Entity',
      'base table' => 'os_feed_item',
      'fieldable' => TRUE,
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundles' => array(
        'feed_item' => array(
          'label' => '',
          'admin' => array(
            'path' => 'admin/config/content/os_feed/manage/os_feed',
            'real path' => 'admin/config/content/os_feed/manage/os_feed',
            'access arguments' => array('os_feed manage'),
          ),
        ),
      ),
      'views controller class' => 'OsReaderViewsController',
      'metadata controller class' => 'OsReaderMetadataController',
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function os_reader_admin_paths() {
  return array(
    'cp/content/import' => TRUE,
    'cp/content/import/*' => TRUE,
  );
}

/**
 * Create an OS feed item object.
 *
 * @param $values
 *  The initialized values of the OS feed item object.
 *
 * @return Entity
 *  The entity object of the OS feed item entry.
 */
function os_reader_feed_item_create($values = array()) {
  $values += array(
    'type' => 'feed_item',
    'created' => time(),
  );

  return entity_create('os_feed_item', $values);
}

/**
 * Load an OS feed item entry.
 *
 * @param $id
 *  The OS feed item identifier.
 *
 * @return Entity
 *  The OS feed item object.
 */
function os_reader_feed_item_load($id) {
  return entity_load_single('os_feed_item', $id);
}

/**
 * Load multiple OS feed item entries.
 *
 * @param $ids
 *  List of IDs to load.
 *
 * @return Entity
 *  List of OS feed item entries.
 */
function os_reader_feed_item_load_multiple($ids) {
  return entity_load('os_feed_item', $ids);
}

/**
 * Delete multiple imported entities.
 *
 * @param $ids
 *  The identifiers of the imported entities.
 */
function os_reader_feed_item_delete_multiple($ids) {
  entity_delete_multiple('os_feed_item', $ids);
}

/**
 * Implements hook_feeds_plugins().
 */
function os_reader_feeds_plugins() {
  $info = array();
  $info['OsFeedReaderFetcher'] = array(
    'name' => t('OS feed reader fetcher'),
    'description' => t('Fetch info from a out source.'),
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'OsFeedReaderFetcher',
      'file' => 'OsFeedReaderFetcher.inc',
      'path' => drupal_get_path('module', 'os_reader') . '/plugins',
    ),
  );
  $info['OsFeedFetcher'] = array(
    'name'        => t('OS feed fetcher'),
    'description' => t('Fetch feed item from urls.'),
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class'  => 'OsFeedFetcher',
      'file'   => 'OsFeedFetcher.inc',
      'path'   => drupal_get_path('module', 'os_reader') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Create a news node based on a feed item.
 *
 * @param $feed
 *  The feed object to copy.
 * @param $vsite
 *  VSITE object to which to assign the new node.
 *
 * @return
 *   The newely created node object.
 */
function os_reader_copy_feed_item_to_news($feed, $vsite) {
  global $user;

  // Check if the feed was already imported to the VSite.
  $news_node = os_reader_get_news_by_feed_item($feed->id, $vsite->id);
  if (!empty($news_node)) {
    // Feed already imported to VSite.
    return $news_node;
  }

  // Get the first image src.
  $file = FALSE;
  $doc = new DOMDocument();

  try {
    if ($feed->description) {
      $doc->loadHTML($feed->description);
      $images = $doc->getElementsByTagName('img')->item(0);

      if ($images && method_exists($images, 'getAttribute') && $src = $images->getAttribute('src')) {
        $file = system_retrieve_file($src, 'public://', TRUE);
      }
    }
  }
  catch (Exception $e) {
    watchdog('os_reader', t('There was a problem when importing the feed item: @message', array('@message' => filter_xss($e->getMessage()))));
  }

  // Create the "News" node.
  $node = new stdClass();
  $node->type = 'news';
  $node->title = $feed->title;
  $node->language = LANGUAGE_NONE;

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->body->set(array('value' => $feed->description, 'format' => 'filtered_html'));
  $wrapper->field_news_date->set($feed->created);
  $wrapper->field_url->set(array('url' => $feed->url));
  if ($file) {
    $wrapper->field_photo->set((array) $file);
  }
  $wrapper->{OG_AUDIENCE_FIELD}->set(array($vsite->id));
  $wrapper->author->set($user->uid);
  $wrapper->save();

  // Reference the feed to the VSite.
  $feed_wrapper = entity_metadata_wrapper('os_feed_item', $feed);
  $feed_wrapper->field_vsites_reference[] = $vsite->id;

  // Reference the feed to the News node.
  $feed_wrapper->field_nodes_reference[] = $node->nid;
  $feed_wrapper->save();

  return $node;
}

/**
 * Get news node that was imported from a given OS feed item in a given VSite.
 *
 * @param $feed_id
 *  The feed ID.
 * @param $vsite_id
 *  The VSite ID.
 *
 * @return
 *  Return node object of the news node related to the feed item if the feed
 *  item was already imported to the VSite, otherwise return FALSE.
 */
function os_reader_get_news_by_feed_item($feed_id, $vsite_id) {
  // Load news nodes that were imported from the given feed item.
  $wrapper_feed = entity_metadata_wrapper('os_feed_item', $feed_id);
  $news_nodes = $wrapper_feed->field_nodes_reference->value();

  if (empty($news_nodes)) {
    // No imported news nodes.
    return FALSE;
  }

  // Run through imported news nodes to see if any of them belong to the VSite.
  foreach ($news_nodes as $news_node) {
    $wrapper_news = entity_metadata_wrapper('node', $news_node);

    if (!empty($wrapper_news->og_group_ref) && $wrapper_news->og_group_ref->get(0)->getIdentifier() == $vsite_id) {
      // Found news node that matches both feed item and VSite.
      return $news_node;
    }
  }

  // Feed item was not imported to VSite.
  return FALSE;
}

/**
 * Implements hook_node_insert().
 *
 * Import feed item when the user add the feed importer for the first time.
 */
function os_reader_node_insert($node) {
  if (!$node->is_new || $node->type != 'feed_importer') {
    return;
  }

  feeds_source('os_reader', $node->nid)->startImport();
}

/**
 * Node preprocess.
 */
function os_reader_process_node(&$variables) {
  if ($variables['type'] == 'news') {
    if ($variables['view_mode'] == 'teaser' && !$variables['page']) {
      // On the news page allow the next HTML tags in the body field.
      $variables['content']['body'][0]['#markup'] = preg_replace("/<img[^>]+\>/i", " ", $variables['content']['body'][0]['#markup']);
    }

    if (os_reader_get_feed_item_by_nid($variables['node']->nid)) {
      // When watching an imported news item - don't apply the site time zone.
      $date = new DateTime(NULL, timezone_open('UTC'));
      $date->setTimestamp($variables['content']['field_news_date']['#items'][0]['value']);
      $vars['content']['field_news_date'][0]['#markup'] = $date->format('F j, Y');
    }
  }

  // When accessing an importer node redirect the user to the importing page.
  if ($variables['page'] && $variables['type'] == 'feed_importer') {
    $url = 'cp/content/import';

    if ($vsite = vsite_get_vsite()) {
      $node = node_load($variables['nid']);
      $purl = $vsite->group->purl;

      if (!isset($vsite->group->purl) && is_array($node->purl) && !empty($node->purl['value'])) {
        $purl = $node->purl['value'];
      }

      $url = $purl . '/' . $url;
    }

    drupal_goto('news', array('fragment' => 'overlay=' . $url));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_reader_form_feed_importer_node_form_alter(&$form, &$form_state) {
  // Place URL field before title field.
  $form['field_rss_url']['#weight'] = -6;

  // Add description to title field.
  $form['title']['#description'] = t('Administrative title used to describe this feed ex. \'Sports from The Gazette\'.');

  if (empty($form['#node']->nid)) {
    $form['#validate'][] = 'os_reader_validate_address';
  }

  hide($form['menu']);
}

/**
 * Validate handler; Check the RSS address Prevent duplicate feed importers.
 */
function os_reader_validate_address($form, &$form_state) {
  if (!$form_state['values']['field_rss_url']) {
    return;
  }

  $url = $form_state['values']['field_rss_url']['und'][0]['value'];
  $result = drupal_http_request($url);
  if ($result->code != 200) {
    form_set_error('field_rss_url', t("The address @url is not a valid address.", array('@url' => $url)));
  }

  $vsite_id = $form_state['values']['og_group_ref']['und'][0]['target_id'];

  // Check for existing nodes in the same VSite.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'feed_importer')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $vsite_id)
    ->fieldCondition('field_rss_url', 'value', $url)
    ->execute();

  if (!empty($result['node'])) {
    $row = reset($result['node']);
    $node = node_load($row->nid);

    $params = array(
      '@url' => url('node/' . $node->nid),
      '@title' => $node->title,
    );
    form_set_error('field_rss_url', t('RSS url already exists in <a href="@url">@title</a>.', $params));
  }
}

/**
 * Implements hook_form_FORM_ID_alter(); Remove filter when not inside a VSite.
 */
function os_reader_form_views_exposed_form_alter(&$form, &$form_state) {
  if (empty($form['feed_is_imported'])) {
    // Not os-reader exposed form.
    return;
  }

  // Change option '-Any-' to 'All'.
  $form['feed_is_imported']['#options']['All'] = t('All');

  $vsite = vsite_get_vsite();

  if (empty($vsite)) {
    // Not in a VSite, remove views filter.
    $form['#info'] = array();
    $form['submit']['#access'] = FALSE;
    $form['feed_is_imported']['#access'] = FALSE;
    $form['feed_by_text']['#access'] = FALSE;
  }
}

/**
 * Check if a news item is relate to feed item.
 *
 * @param $nid
 *  The news NID.
 *
 * @return bool
 *  return TRUE/FALSE if the news item is an imported feed item.
 */
function os_reader_get_feed_item_by_nid($nid) {
  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'os_feed_item')
    ->fieldCondition('field_nodes_reference', 'target_id', $nid)
    ->execute();

  return !empty($result['os_feed_item']);
}
